{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js\";\n\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.removeStudent = id => {\n      var updatedCampus = this.props.campus;\n\n      for (let index = 0; index < updatedCampus.students.length; index++) if (updatedCampus.students[index].id === id) delete updatedCampus.students[index];\n\n      this.props.editCampus(this.props.campus.id, updatedCampus); // Update state, and trigger redirect to show the edited student\n\n      this.setState({\n        name: this.props.campus.name,\n        address: this.props.campus.address,\n        description: this.props.campus.description,\n        imageUrl: this.props.campus.imageUrl,\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.state = {\n      name: props.campus.name,\n      address: props.campus.address,\n      description: props.campus.description,\n      imageUrl: props.campus.imageUrl,\n      id: props.campus.id,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get the specific campus data from back-end database\n\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Take action after user click the submit button\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        removeStudent: this.removeStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (id, campus) => dispatch(editCampusThunk(id, campus))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js"],"names":["Header","React","Component","connect","Redirect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","CampusContainer","constructor","props","removeStudent","id","updatedCampus","campus","index","students","length","editCampus","setState","name","address","description","imageUrl","redirect","redirectId","state","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","deleteCampus","mapState","mapDispatch","dispatch","campusId"],"mappings":"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","sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: props.campus.name, \n      address: props.campus.address, \n      description: props.campus.description, \n      imageUrl: props.campus.imageUrl,\n      id: props.campus.id,\n      redirect: false, \n      redirectId: null\n    };\n  }\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n    // Take action after user click the submit button\n    removeStudent = (id) => {\n        var updatedCampus = this.props.campus;\n\n        for(let index = 0; index < updatedCampus.students.length; index++)\n            if (updatedCampus.students[index].id === id)\n                delete updatedCampus.students[index];\n    \n        this.props.editCampus(this.props.campus.id, updatedCampus);\n\n    \n        // Update state, and trigger redirect to show the edited student\n        this.setState({\n            name: this.props.campus.name, \n            address: this.props.campus.address, \n            description: this.props.campus.description, \n            imageUrl: this.props.campus.imageUrl,\n            redirect: true, \n            redirectId: this.props.campus.id\n        });\n\n      }\n\n        // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n}\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    if(this.state.redirect) {\n        return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n      }\n    return (\n      <div>\n        <Header />\n        <CampusView \n        campus={this.props.campus} \n        deleteCampus={this.props.deleteCampus}  \n        removeStudent={this.removeStudent}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (id, campus) => dispatch(editCampusThunk(id, campus))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"]},"metadata":{},"sourceType":"module"}