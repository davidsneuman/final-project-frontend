{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.isValidInput()) {\n        let student = {\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n          campusId: this.state.campusId,\n          email: this.state.email,\n          imageUrl: this.state.imageUrl,\n          gpa: this.state.gpa\n        }; // Edit student in back-end database\n\n        await this.props.editStudent(this.props.student.id, student); // Update state, and trigger redirect to show the edited student\n\n        this.setState({\n          firstname: this.props.student.firstname,\n          lastname: this.props.student.lastname,\n          campusId: this.props.student.campusId,\n          email: this.props.student.email,\n          imageUrl: this.props.student.imageUrl,\n          gpa: this.props.student.gpa,\n          redirect: true,\n          redirectId: this.props.student.id\n        });\n      } else {\n        this.alertInvalidInput();\n      }\n    };\n\n    this.state = {\n      firstname: props.student.firstname,\n      lastname: props.student.lastname,\n      campusId: props.student.campusId,\n      email: props.student.email,\n      imageUrl: props.student.imageUrl,\n      gpa: props.student.gpa,\n      id: props.student.id,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get student data from back-end database\n\n\n  componentDidMount() {\n    // this.props.fetchStudent(this.props.match.params.id);\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  isGpaValid() {\n    return !this.state.gpa || this.state.gpa <= 4.0 && this.state.gpa >= 0.0;\n  }\n\n  isValidInput() {\n    return this.isGpaValid() && this.state.firstname && this.state.lastname && this.state.email && this.state.campusId;\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n      case !this.state.firstname:\n        alert(\"First Name is invalid\");\n        break;\n\n      case !this.state.lastname:\n        alert(\"Last Name is invalid\");\n        break;\n\n      case !this.state.campusId:\n        alert(\"Campus ID is invalid\");\n        break;\n\n      case !this.state.email:\n        alert(\"Email is invalid\");\n        break;\n\n      case !this.isGpaValid():\n        alert(\"GPA is invalid\");\n        break;\n\n      default:\n        break;\n    }\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: (id, student) => dispatch(editStudentThunk(id, student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","editStudentThunk","fetchStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","isValidInput","student","firstname","state","lastname","campusId","email","imageUrl","gpa","editStudent","id","redirect","redirectId","alertInvalidInput","componentDidMount","fetchStudent","match","params","isGpaValid","alert","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: props.student.firstname, \n      lastname: props.student.lastname, \n      campusId: props.student.campusId, \n      email: props.student.email,\n      imageUrl: props.student.imageUrl,\n      gpa: props.student.gpa,\n      id: props.student.id,\n      redirect: false, \n      redirectId: null\n    };\n  }\n      // Get student data from back-end database\n      componentDidMount() {\n        // this.props.fetchStudent(this.props.match.params.id);\n        this.props.fetchStudent(this.props.match.params.id);\n          }\n\n  isGpaValid() {\n    return !this.state.gpa || (this.state.gpa <= 4.0 && this.state.gpa >= 0.0)\n  }\n\n  isValidInput() {\n    return this.isGpaValid()\n    && this.state.firstname \n    && this.state.lastname \n    && this.state.email \n    && this.state.campusId\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n        case !this.state.firstname:\n            alert(\"First Name is invalid\")\n            break\n        case !this.state.lastname:\n            alert(\"Last Name is invalid\")\n            break\n        case !this.state.campusId:\n            alert(\"Campus ID is invalid\")\n            break\n        case !this.state.email:\n            alert(\"Email is invalid\")\n            break\n        case !this.isGpaValid():\n            alert(\"GPA is invalid\")\n            break\n        default:\n            break\n    }\n\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.isValidInput()) {\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa\n    };\n    \n    // Edit student in back-end database\n    await this.props.editStudent(this.props.student.id, student);\n\n    // Update state, and trigger redirect to show the edited student\n    this.setState({\n        firstname: this.props.student.firstname, \n        lastname: this.props.student.lastname, \n        campusId: this.props.student.campusId, \n        email: this.props.student.email,\n        imageUrl: this.props.student.imageUrl,\n        gpa: this.props.student.gpa,\n        redirect: true, \n        redirectId: this.props.student.id\n    });\n} else {\n    this.alertInvalidInput()\n}\n  }\n\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          student={this.props.student}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}\n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\nconst mapState = (state) => {\n    return {\n      student: state.student,  // Get the State object from Reducer \"student\"\n    };\n  };\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (id, student) => dispatch(editStudentThunk(id, student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}