{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/NewCampusContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.isValidInput()) {\n        let campus = {\n          name: this.state.name,\n          address: this.state.address,\n          description: this.state.description,\n          imageUrl: this.state.imageUrl\n        }; // Add new student in back-end database\n\n        let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          name: \"\",\n          address: \"\",\n          description: \"\",\n          imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n          redirect: true,\n          redirectId: this.props.campus.id\n        });\n      } else {\n        this.alertInvalidInput();\n      }\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"https://sawebfilesprod001.blob.core.windows.net/images/Untitled%20design%20(5)-2.png?sv=2017-04-17&sr=b&si=DNNFileManagerPolicy&sig=ckoT07MeavoWWJ5qBso4t0rHKm%2FGXdMWIVa8%2Bt9eRIE%3D\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  isValidInput() {\n    return this.state.name && this.state.address;\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n      case !this.state.name:\n        alert(\"Campus name is invalid\");\n        break;\n\n      case !this.state.address:\n        alert(\"Address is invalid\");\n        break;\n\n      default:\n        break;\n    }\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/NewCampusContainer.js"],"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","isValidInput","campus","state","address","description","imageUrl","newCampus","addCampus","redirect","redirectId","id","alertInvalidInput","alert","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\", \n      address: \"\", \n      description: \"\", \n      imageUrl: \"https://sawebfilesprod001.blob.core.windows.net/images/Untitled%20design%20(5)-2.png?sv=2017-04-17&sr=b&si=DNNFileManagerPolicy&sig=ckoT07MeavoWWJ5qBso4t0rHKm%2FGXdMWIVa8%2Bt9eRIE%3D\",\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  isValidInput() {\n    return this.state.name && this.state.address \n  }\n\n  alertInvalidInput() {\n    switch (true) {\n        case !this.state.name:\n            alert(\"Campus name is invalid\")\n            break\n        case !this.state.address:\n            alert(\"Address is invalid\")\n            break\n        default:\n            break\n    }\n\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.isValidInput()) {\n    let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n    };\n    \n    // Add new student in back-end database\n    let newCampus = await this.props.addCampus(campus);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      name: \"\", \n      address: \"\", \n      description: \"\", \n      imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n      redirect: true, \n      redirectId: this.props.campus.id\n    });\n} else {\n    this.alertInvalidInput()\n}\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewCampusView \n          handleChange = {this.handleChange} \n          handleSubmit = {this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);"]},"metadata":{},"sourceType":"module"}