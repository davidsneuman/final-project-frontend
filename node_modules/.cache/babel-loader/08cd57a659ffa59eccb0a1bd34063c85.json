{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EnrollStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\nimport EnrollStudentView from '../views/EnrollStudentView';\nimport { fetchAllStudentsThunk, fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EnrollStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.state.currentlyUnenrolledStudents.contains(this.state.id)) {\n        // Add new student in back-end database\n        let newStudent = await this.props.editStudent(this.state.id, {\n          campusId: this.props.match.params.id\n        }); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          id: this.props.student.id,\n          campusId: this.props.match.params.id,\n          redirect: true,\n          redirectId: this.state.id\n        });\n      } else if (this.state.currentlyEnrolledStudents.contains(this.state.id)) {\n        alert(\"Student with ID: \" + this.state.id + \" is already enrolled in this campus\");\n      } else {\n        alert(\"Student does not exist.\");\n      }\n    };\n\n    this.state = {\n      id: null,\n      campusId: this.props.match.params.id,\n      currentlyEnrolledStudents: null,\n      currentlyUnenrolledStudents: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  getCurrentEnrollment() {\n    var enrolledStudents = new Set();\n    var unenrolledStudents = new Set();\n    this.props.allStudents.map(student => {\n      if (student.campusId == this.props.campusId) {\n        enrolledStudents.add(student.id);\n      } else {\n        unenrolledStudents.add(student.id);\n      }\n    });\n    this.setState({\n      currentlyEnrolledStudents: enrolledStudents,\n      currentlyUnenrolledStudents: unenrolledStudents\n    }); // console.log(enrolledStudents);\n    // console.log(unenrolledStudents);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllStudents();\n    this.getCurrentEnrollment();\n  }\n\n  isGpaValid() {\n    return !this.state.gpa || this.state.gpa <= 4.0 && this.state.gpa >= 0.0;\n  }\n\n  isValidInput() {\n    return this.isGpaValid() && this.state.firstname && this.state.lastname && this.state.email;\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n      case !this.state.firstname:\n        alert(\"First Name is invalid\");\n        break;\n\n      case !this.state.lastname:\n        alert(\"Last Name is invalid\");\n        break;\n\n      case !this.state.email:\n        alert(\"Email is invalid\");\n        break;\n\n      case !this.isGpaValid():\n        alert(\"GPA is invalid\");\n        break;\n\n      default:\n        break;\n    }\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.props.match.params.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EnrollStudentView, {\n        students: this.props.allStudents,\n        campusId: this.props.match.params.id,\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student,\n    // Get the State object from Reducer \"student\"\n    allStudents: state.allStudents\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: (id, student) => dispatch(editStudentThunk(id, student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default withRouter(connect(mapState, mapDispatch)(EnrollStudentContainer));","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EnrollStudentContainer.js"],"names":["Header","Component","connect","Redirect","withRouter","EnrollStudentView","fetchAllStudentsThunk","fetchStudentThunk","editStudentThunk","EnrollStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","currentlyUnenrolledStudents","contains","id","newStudent","editStudent","campusId","match","params","student","redirect","redirectId","currentlyEnrolledStudents","alert","getCurrentEnrollment","enrolledStudents","Set","unenrolledStudents","allStudents","map","add","componentDidMount","fetchAllStudents","isGpaValid","gpa","isValidInput","firstname","lastname","email","alertInvalidInput","componentWillUnmount","render","mapState","mapDispatch","dispatch","fetchStudent"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\n\nimport EnrollStudentView from '../views/EnrollStudentView';\nimport { fetchAllStudentsThunk, fetchStudentThunk, editStudentThunk } from '../../store/thunks';\n\nclass EnrollStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      id: null,\n      campusId: this.props.match.params.id, \n      currentlyEnrolledStudents: null,\n      currentlyUnenrolledStudents: null,\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  getCurrentEnrollment() {\n    var enrolledStudents = new Set();\n    var unenrolledStudents = new Set();\n    this.props.allStudents.map((student) => {\n        if(student.campusId == this.props.campusId) {\n            enrolledStudents.add(student.id);\n        } else {\n            unenrolledStudents.add(student.id);\n        }\n    });\n    this.setState({\n        currentlyEnrolledStudents: enrolledStudents,\n        currentlyUnenrolledStudents: unenrolledStudents\n    })\n    // console.log(enrolledStudents);\n    // console.log(unenrolledStudents);\n\n  }\n  \n  componentDidMount() {\n    this.props.fetchAllStudents();\n    this.getCurrentEnrollment();\n\n  }\n\n  isGpaValid() {\n    return !this.state.gpa || (this.state.gpa <= 4.0 && this.state.gpa >= 0.0)\n  }\n\n  isValidInput() {\n    return this.isGpaValid()\n    && this.state.firstname \n    && this.state.lastname \n    && this.state.email \n  }\n\n  alertInvalidInput() {\n    switch (true) {\n        case !this.state.firstname:\n            alert(\"First Name is invalid\")\n            break\n        case !this.state.lastname:\n            alert(\"Last Name is invalid\")\n            break\n        case !this.state.email:\n            alert(\"Email is invalid\")\n            break\n        case !this.isGpaValid():\n            alert(\"GPA is invalid\")\n            break\n        default:\n            break\n    }\n\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.state.currentlyUnenrolledStudents.contains(this.state.id)) {\n\n    // Add new student in back-end database\n    let newStudent = await this.props.editStudent(this.state.id, {campusId: this.props.match.params.id});\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      id: this.props.student.id,\n      campusId: this.props.match.params.id, \n      redirect: true, \n      redirectId: this.state.id\n    });\n} else if (this.state.currentlyEnrolledStudents.contains(this.state.id)){\n    alert(\"Student with ID: \" + this.state.id + \" is already enrolled in this campus\");\n\n} else {\n    alert(\"Student does not exist.\")\n}\n} \n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.props.match.params.id}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EnrollStudentView \n          students={this.props.allStudents}\n          campusId={this.props.match.params.id}\n          student={this.props.student}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n               \n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\nconst mapState = (state) => {\n    return {\n      student: state.student,  // Get the State object from Reducer \"student\"\n      allStudents: state.allStudents\n    };\n  };\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (id, student) => dispatch(editStudentThunk(id, student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(EnrollStudentContainer));"]},"metadata":{},"sourceType":"module"}