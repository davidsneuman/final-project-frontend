{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js\";\n\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { deleteCampus, editCampus } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.removeStudentCampus = id => {\n      var updatedCampus = this.props.campus;\n      updatedCampus.students.map(student => {\n        if (student.id === id) {\n          return student.campusId = null;\n        }\n      });\n      console.log(updatedCampus);\n      return updatedCampus;\n    };\n  }\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus,\n        removeStudentCampus: this.props.removeStudentCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (campusId, campus) => dispatch(editCampusThunk(campusId, campus))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js"],"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","deleteCampus","editCampus","CampusContainer","removeStudentCampus","id","updatedCampus","props","campus","students","map","student","campusId","console","log","componentDidMount","fetchCampus","match","params","render","mapState","state","mapDispatch","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,eAA9C,QAAqE,oBAArE;AAEA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,oCAAzC;;;AAEA,MAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAOtCS,mBAPsC,GAOfC,EAAD,IAAQ;AAC5B,UAAIC,aAAa,GAAG,KAAKC,KAAL,CAAWC,MAA/B;AACAF,MAAAA,aAAa,CAACG,QAAd,CAAuBC,GAAvB,CAA4BC,OAAD,IAAa;AACpC,YAAGA,OAAO,CAACN,EAAR,KAAeA,EAAlB,EAAqB;AACjB,iBAAOM,OAAO,CAACC,QAAR,GAAmB,IAA1B;AACH;AAAC,OAHN;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACA,aAAOA,aAAP;AACH,KAfuC;AAAA;;AACtC;AACAS,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKR,KAAL,CAAWS,WAAX,CAAuB,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwBb,EAA/C;AACD;;AAaD;AACAc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AACA,QAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWC,MADnB;AAEA,QAAA,YAAY,EAAE,KAAKD,KAAL,CAAWN,YAFzB;AAGA,QAAA,UAAU,EAAE,KAAKM,KAAL,CAAWL,UAHvB;AAIA,QAAA,mBAAmB,EAAE,KAAKK,KAAL,CAAWH;AAJhC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA/BqC,C,CAkCxC;AACA;AACA;;;AACA,MAAMgB,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLb,IAAAA,MAAM,EAAEa,KAAK,CAACb,MADT,CACkB;;AADlB,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMc,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLP,IAAAA,WAAW,EAAGX,EAAD,IAAQkB,QAAQ,CAAC1B,gBAAgB,CAACQ,EAAD,CAAjB,CADxB;AAELJ,IAAAA,YAAY,EAAGW,QAAD,IAAcW,QAAQ,CAACzB,iBAAiB,CAACc,QAAD,CAAlB,CAF/B;AAGLV,IAAAA,UAAU,EAAE,CAACU,QAAD,EAAWJ,MAAX,KAAsBe,QAAQ,CAACxB,eAAe,CAACa,QAAD,EAAWJ,MAAX,CAAhB;AAHrC,GAAP;AAKD,CAND,C,CAQA;AACA;AACA;;;AACA,eAAeZ,OAAO,CAACwB,QAAD,EAAWE,WAAX,CAAP,CAA+BnB,eAA/B,CAAf","sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\nimport { deleteCampus, editCampus } from '../../store/actions/actionCreators';\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  removeStudentCampus = (id) => {\n    var updatedCampus = this.props.campus;\n    updatedCampus.students.map((student )=> {\n        if(student.id === id){ \n            return student.campusId = null;\n        }});\n    console.log(updatedCampus);\n    return updatedCampus;\n};\n\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView \n        campus={this.props.campus} \n        deleteCampus={this.props.deleteCampus}  \n        editCampus={this.props.editCampus} \n        removeStudentCampus={this.props.removeStudentCampus}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (campusId, campus) => dispatch(editCampusThunk(campusId, campus)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"]},"metadata":{},"sourceType":"module"}