{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js\";\n\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { deleteCampus, editCampus } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.removeStudent = id => {\n      // event.preventDefault();  // Prevent browser reload/refresh after submit.\n      // Edit student in back-end database\n      this.props.editCampus(this.props.campus.id, this.props.removeStudentCampus(id)); // Update state, and trigger redirect to show the edited student\n\n      this.setState({\n        name: this.props.campus.name,\n        address: this.props.campus.address,\n        description: this.props.campus.description,\n        imageUrl: this.props.campus.imageUrl,\n        students: this.props.campus.students,\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.removeStudentCampus = id => {\n      var updatedCampus = this.props.campus;\n      updatedCampus.students.map(student => {\n        if (student.id === id) {\n          return student.campusId = null;\n        }\n      });\n      console.log(updatedCampus);\n      return updatedCampus;\n    };\n\n    this.state = {\n      name: props.campus.name,\n      address: props.campus.address,\n      description: props.campus.description,\n      imageUrl: props.campus.imageUrl,\n      id: props.campus.id,\n      students: props.students,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get the specific campus data from back-end database\n\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus,\n        removeStudent: this.props.removeStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (campusId, campus) => dispatch(editCampusThunk(campusId, campus))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/CampusContainer.js"],"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","deleteCampus","editCampus","CampusContainer","constructor","props","removeStudent","id","campus","removeStudentCampus","setState","name","address","description","imageUrl","students","redirect","redirectId","updatedCampus","map","student","campusId","console","log","state","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,eAA9C,QAAqE,oBAArE;AAEA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,oCAAzC;;;AAEA,MAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AACpCS,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAoBpBC,aApBoB,GAoBJC,EAAE,IAAI;AACpB;AAEA;AACA,WAAKF,KAAL,CAAWH,UAAX,CAAsB,KAAKG,KAAL,CAAWG,MAAX,CAAkBD,EAAxC,EAA4C,KAAKF,KAAL,CAAWI,mBAAX,CAA+BF,EAA/B,CAA5C,EAJoB,CAMpB;;AACA,WAAKG,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWG,MAAX,CAAkBG,IADd;AAEVC,QAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWG,MAAX,CAAkBI,OAFjB;AAGVC,QAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWG,MAAX,CAAkBK,WAHrB;AAIVC,QAAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWG,MAAX,CAAkBM,QAJlB;AAKVC,QAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWG,MAAX,CAAkBO,QALlB;AAMVC,QAAAA,QAAQ,EAAE,IANA;AAOVC,QAAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWG,MAAX,CAAkBD;AAPpB,OAAd;AAUD,KArCmB;;AAAA,SAwCpBE,mBAxCoB,GAwCEF,EAAE,IAAI;AAC1B,UAAIW,aAAa,GAAG,KAAKb,KAAL,CAAWG,MAA/B;AACAU,MAAAA,aAAa,CAACH,QAAd,CAAuBI,GAAvB,CAA4BC,OAAD,IAAa;AACpC,YAAGA,OAAO,CAACb,EAAR,KAAeA,EAAlB,EAAqB;AACjB,iBAAOa,OAAO,CAACC,QAAR,GAAmB,IAA1B;AACH;AAAC,OAHN;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AACA,aAAOA,aAAP;AACH,KAhDqB;;AAEd,SAAKM,KAAL,GAAa;AACTb,MAAAA,IAAI,EAAEN,KAAK,CAACG,MAAN,CAAaG,IADV;AAETC,MAAAA,OAAO,EAAEP,KAAK,CAACG,MAAN,CAAaI,OAFb;AAGTC,MAAAA,WAAW,EAAER,KAAK,CAACG,MAAN,CAAaK,WAHjB;AAITC,MAAAA,QAAQ,EAAET,KAAK,CAACG,MAAN,CAAaM,QAJd;AAKTP,MAAAA,EAAE,EAAEF,KAAK,CAACG,MAAN,CAAaD,EALR;AAMTQ,MAAAA,QAAQ,EAAEV,KAAK,CAACU,QANP;AAOTC,MAAAA,QAAQ,EAAE,KAPD;AAQTC,MAAAA,UAAU,EAAE;AARH,KAAb;AAUD,GAbiC,CAetC;;;AACAQ,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKpB,KAAL,CAAWqB,WAAX,CAAuB,KAAKrB,KAAL,CAAWsB,KAAX,CAAiBC,MAAjB,CAAwBrB,EAA/C;AACD;;AA+BHsB,EAAAA,oBAAoB,GAAG;AACnB,SAAKnB,QAAL,CAAc;AAACM,MAAAA,QAAQ,EAAE,KAAX;AAAkBC,MAAAA,UAAU,EAAE;AAA9B,KAAd;AACH,GApDuC,CAwDtC;;;AACAa,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AACA,QAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWG,MADnB;AAEA,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWJ,YAFzB;AAGA,QAAA,UAAU,EAAE,KAAKI,KAAL,CAAWH,UAHvB;AAIA,QAAA,aAAa,EAAE,KAAKG,KAAL,CAAWC;AAJ1B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AArEqC,C,CAwExC;AACA;AACA;;;AACA,MAAMyB,QAAQ,GAAIP,KAAD,IAAW;AAC1B,SAAO;AACLhB,IAAAA,MAAM,EAAEgB,KAAK,CAAChB,MADT,CACkB;;AADlB,GAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMwB,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLP,IAAAA,WAAW,EAAGnB,EAAD,IAAQ0B,QAAQ,CAACpC,gBAAgB,CAACU,EAAD,CAAjB,CADxB;AAELN,IAAAA,YAAY,EAAGoB,QAAD,IAAcY,QAAQ,CAACnC,iBAAiB,CAACuB,QAAD,CAAlB,CAF/B;AAGLnB,IAAAA,UAAU,EAAE,CAACmB,QAAD,EAAWb,MAAX,KAAsByB,QAAQ,CAAClC,eAAe,CAACsB,QAAD,EAAWb,MAAX,CAAhB;AAHrC,GAAP;AAKD,CAND,C,CAQA;AACA;AACA;;;AACA,eAAeZ,OAAO,CAACmC,QAAD,EAAWC,WAAX,CAAP,CAA+B7B,eAA/B,CAAf","sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\nimport { deleteCampus, editCampus } from '../../store/actions/actionCreators';\n\nclass CampusContainer extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: props.campus.name, \n            address: props.campus.address, \n            description: props.campus.description, \n            imageUrl: props.campus.imageUrl,\n            id: props.campus.id,\n            students: props.students,\n            redirect: false, \n            redirectId: null\n          };\n      }\n\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  removeStudent = id => {\n    // event.preventDefault();  // Prevent browser reload/refresh after submit.\n    \n    // Edit student in back-end database\n    this.props.editCampus(this.props.campus.id, this.props.removeStudentCampus(id));\n\n    // Update state, and trigger redirect to show the edited student\n    this.setState({\n        name: this.props.campus.name, \n        address: this.props.campus.address, \n        description: this.props.campus.description, \n        imageUrl: this.props.campus.imageUrl,\n        students: this.props.campus.students,\n        redirect: true, \n        redirectId: this.props.campus.id\n    });\n\n  }\n\n\n  removeStudentCampus = id => {\n    var updatedCampus = this.props.campus;\n    updatedCampus.students.map((student )=> {\n        if(student.id === id){ \n            return student.campusId = null;\n        }});\n    console.log(updatedCampus);\n    return updatedCampus;\n}\ncomponentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n}\n\n\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView \n        campus={this.props.campus} \n        deleteCampus={this.props.deleteCampus}  \n        editCampus={this.props.editCampus} \n        removeStudent={this.props.removeStudent}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (campusId, campus) => dispatch(editCampusThunk(campusId, campus)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"]},"metadata":{},"sourceType":"module"}