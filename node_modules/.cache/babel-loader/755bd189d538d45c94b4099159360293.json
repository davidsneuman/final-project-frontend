{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EditCampusContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.isValidInput()) {\n        let campus = {\n          name: this.state.name,\n          address: this.state.address,\n          description: this.state.description,\n          imageUrl: this.state.imageUrl\n        }; // Edit student in back-end database\n\n        await this.props.editCampus(this.props.campus.id, campus); // Update state, and trigger redirect to show the edited student\n\n        this.setState({\n          name: this.props.campus.name,\n          address: this.props.campus.address,\n          description: this.props.campus.description,\n          imageUrl: this.props.campus.imageUrl,\n          redirect: true,\n          redirectId: this.props.campus.id\n        });\n      } else {\n        this.alertInvalidInput();\n      }\n    };\n\n    this.state = {\n      name: props.campus.name,\n      address: props.campus.address,\n      description: props.campus.description,\n      imageUrl: props.student.imageUrl,\n      id: props.campus.id,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get student data from back-end database\n\n\n  componentDidMount() {\n    // this.props.fetchStudent(this.props.match.params.id);\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  isValidInput() {\n    return this.state.name && this.state.address;\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n      case !this.state.name:\n        alert(\"Campus name is invalid\");\n        break;\n\n      case !this.state.address:\n        alert(\"Address is invalid\");\n        break;\n\n      default:\n        break;\n    }\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.props.campus,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"student\"\n\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: (id, campus) => dispatch(editCampusThunk(id, campus))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EditCampusContainer.js"],"names":["Header","Component","connect","Redirect","EditCampusView","editCampusThunk","fetchCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","isValidInput","campus","state","address","description","imageUrl","editCampus","id","redirect","redirectId","alertInvalidInput","student","componentDidMount","fetchCampus","match","params","alert","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: props.campus.name, \n      address: props.campus.address, \n      description: props.campus.description, \n      imageUrl: props.student.imageUrl,\n      id: props.campus.id,\n      redirect: false, \n      redirectId: null\n    };\n  }\n    // Get student data from back-end database\n    componentDidMount() {\n    // this.props.fetchStudent(this.props.match.params.id);\n    this.props.fetchCampus(this.props.match.params.id);\n        }\n\n    isValidInput() {\n    return this.state.name && this.state.address \n    }\n\n    alertInvalidInput() {\n    switch (true) {\n        case !this.state.name:\n            alert(\"Campus name is invalid\")\n            break\n        case !this.state.address:\n            alert(\"Address is invalid\")\n            break\n        default:\n            break\n    }\n\n    }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.isValidInput()) {\n    let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageUrl: this.state.imageUrl,\n    };\n    \n    // Edit student in back-end database\n    await this.props.editCampus(this.props.campus.id, campus);\n\n    // Update state, and trigger redirect to show the edited student\n    this.setState({\n        name: this.props.campus.name, \n        address: this.props.campus.address, \n        description: this.props.campus.description, \n        imageUrl: this.props.campus.imageUrl,\n        redirect: true, \n        redirectId: this.props.campus.id\n    });\n} else {\n    this.alertInvalidInput()\n}\n  }\n\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          campus={this.props.campus}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}\n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\nconst mapState = (state) => {\n    return {\n      campus: state.campus,  // Get the State object from Reducer \"student\"\n    };\n  };\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n        editCampus: (id, campus) => dispatch(editCampusThunk(id, campus)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"]},"metadata":{},"sourceType":"module"}