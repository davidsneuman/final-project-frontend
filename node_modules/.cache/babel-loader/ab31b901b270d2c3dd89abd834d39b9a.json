{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EnrollStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\nimport EnrollStudentView from '../views/EnrollStudentView';\nimport { fetchAllStudentsThunk, fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EnrollStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      this.setState({\n        id: event.target.value,\n        currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n        currentlyUnenrolledStudents: this.getCurrentlyUnenrolled()\n      });\n\n      if (this.state.currentlyUnenrolledStudents.has(this.state.id)) {\n        // Add new student in back-end database\n        let newStudent = await this.props.editStudent(this.state.id, {\n          campusId: this.props.match.params.id\n        }); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          id: this.props.student.id,\n          campusId: this.props.match.params.id,\n          currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n          currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n          redirect: true,\n          redirectId: this.state.id\n        });\n      } else if (this.state.currentlyEnrolledStudents.has(this.state.id)) {\n        alert(\"Student with ID: \" + this.state.id + \" is already enrolled in this campus\");\n      } else {\n        alert(\"Student does not exist.\");\n      }\n    };\n\n    this.state = {\n      id: null,\n      campusId: this.props.match.params.id,\n      currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n      currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllStudents();\n    this.setState({\n      currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n      currentlyUnenrolledStudents: this.getCurrentlyUnenrolled()\n    });\n  } // Capture input data when it is entered\n\n\n  getCurrentlyEnrolled() {\n    var enrolledStudents = new Set();\n    this.props.allStudents.map(student => {\n      if (String(student.campusId) === String(this.props.match.params.id)) {\n        enrolledStudents.add(String(student.id));\n      }\n    });\n    return enrolledStudents;\n  }\n\n  getCurrentlyUnenrolled() {\n    var unenrolledStudents = new Set();\n    this.props.allStudents.map(student => {\n      if (String(student.campusId) !== String(this.props.match.params.id)) {\n        unenrolledStudents.add(String(student.id));\n      }\n    });\n    return unenrolledStudents;\n  } // Unmount when the component is being removed from the DOM:\n\n\n  componentWillUnmount() {\n    this.setState({\n      id: null,\n      currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n      currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.props.match.params.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EnrollStudentView, {\n        students: this.props.allStudents,\n        campusId: this.props.match.params.id,\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student,\n    // Get the State object from Reducer \"student\"\n    allStudents: state.allStudents\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: (id, student) => dispatch(editStudentThunk(id, student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default withRouter(connect(mapState, mapDispatch)(EnrollStudentContainer));","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/EnrollStudentContainer.js"],"names":["Header","Component","connect","Redirect","withRouter","EnrollStudentView","fetchAllStudentsThunk","fetchStudentThunk","editStudentThunk","EnrollStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","id","currentlyEnrolledStudents","getCurrentlyEnrolled","currentlyUnenrolledStudents","getCurrentlyUnenrolled","state","has","newStudent","editStudent","campusId","match","params","student","redirect","redirectId","alert","componentDidMount","fetchAllStudents","enrolledStudents","Set","allStudents","map","String","add","unenrolledStudents","componentWillUnmount","render","mapState","mapDispatch","dispatch","fetchStudent"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\n\nimport EnrollStudentView from '../views/EnrollStudentView';\nimport { fetchAllStudentsThunk, fetchStudentThunk, editStudentThunk } from '../../store/thunks';\n\nclass EnrollStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      id: null,\n      campusId: this.props.match.params.id, \n      currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n      currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n\n  \n  componentDidMount() {\n    this.props.fetchAllStudents();\n    this.setState({\n        currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n        currentlyUnenrolledStudents: this.getCurrentlyUnenrolled()\n    });\n  }\n\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    this.setState({\n        id: event.target.value,\n        currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n        currentlyUnenrolledStudents: this.getCurrentlyUnenrolled()\n    });\n    if (this.state.currentlyUnenrolledStudents.has(this.state.id)) {\n    // Add new student in back-end database\n    let newStudent = await this.props.editStudent(this.state.id, {campusId: this.props.match.params.id});\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      id: this.props.student.id,\n      campusId: this.props.match.params.id, \n      currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n      currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n      redirect: true, \n      redirectId: this.state.id\n    });\n} else if (this.state.currentlyEnrolledStudents.has(this.state.id)){\n    alert(\"Student with ID: \" + this.state.id + \" is already enrolled in this campus\");\n\n} else {\n    alert(\"Student does not exist.\");\n}\n} \n\n\ngetCurrentlyEnrolled() {\n    \n    var enrolledStudents = new Set();\n    this.props.allStudents.map((student) => {\n        if(String(student.campusId) === String(this.props.match.params.id)) {\n            enrolledStudents.add(String(student.id));\n        } \n    });\n    return enrolledStudents;\n\n  }\n  getCurrentlyUnenrolled() {\n    var unenrolledStudents = new Set();\n    this.props.allStudents.map((student) => {\n        if(String(student.campusId) !== String(this.props.match.params.id)) {\n            unenrolledStudents.add(String(student.id));\n        } \n    });\n    return unenrolledStudents;\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({\n        id: null,\n        currentlyEnrolledStudents: this.getCurrentlyEnrolled(),\n        currentlyUnenrolledStudents: this.getCurrentlyUnenrolled(),\n        redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.props.match.params.id}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EnrollStudentView \n          students={this.props.allStudents}\n          campusId={this.props.match.params.id}\n          student={this.props.student}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n               \n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\nconst mapState = (state) => {\n    return {\n      student: state.student,  // Get the State object from Reducer \"student\"\n      allStudents: state.allStudents\n    };\n  };\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n        fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n        editStudent: (id, student) => dispatch(editStudentThunk(id, student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(EnrollStudentContainer));"]},"metadata":{},"sourceType":"module"}