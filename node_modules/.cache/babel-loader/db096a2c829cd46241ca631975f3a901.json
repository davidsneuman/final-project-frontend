{"ast":null,"code":"var _jsxFileName = \"/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/NewStudentContainer.js\";\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllCampusesThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.isValidInput()) {\n        let student = {\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n          campusId: this.state.campusId,\n          email: this.state.email,\n          imageUrl: this.state.imageUrl,\n          gpa: this.state.gpa\n        }; // Add new student in back-end database\n\n        let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          campusId: null,\n          email: \"\",\n          imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n          gpa: null,\n          redirect: true,\n          redirectId: newStudent.id\n        });\n      } else {\n        this.alertInvalidInput();\n      }\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      email: \"\",\n      imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n      gpa: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  campusIdExists() {\n    if (!this.state.campus.id) {\n      return false;\n    }\n\n    for (const i = 0; i < this.props.allCampuses.length(); i++) {\n      if (String(this.props.allCampuses[i].id) === String(this.state.campus.id)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isGpaValid() {\n    return !this.state.gpa || this.state.gpa <= 4.0 && this.state.gpa >= 0.0;\n  }\n\n  isValidInput() {\n    this.props.fetchAllCampuses();\n    return this.isGpaValid() && this.state.firstname && this.state.lastname && this.state.email && this.state.campusId && this.campusIdExists();\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n      case !this.state.firstname:\n        alert(\"First Name is invalid\");\n        break;\n\n      case !this.state.lastname:\n        alert(\"Last Name is invalid\");\n        break;\n\n      case !this.campusIdExists():\n        alert(\"Campus ID is invalid\");\n        break;\n\n      case !this.state.email:\n        alert(\"Email is invalid\");\n        break;\n\n      case !this.isGpaValid():\n        alert(\"GPA is invalid\");\n        break;\n\n      default:\n        break;\n    }\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        allCampuses: this.props.allCampuses,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"sources":["/Users/davidneuman/OneDrive - Hunter - CUNY/COLLEGE/WEB DEVELOPMENT/finalProject/final-project-frontend/src/components/containers/NewStudentContainer.js"],"names":["Header","Component","connect","Redirect","withRouter","NewStudentView","addStudentThunk","fetchAllCampusesThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","isValidInput","student","firstname","state","lastname","campusId","email","imageUrl","gpa","newStudent","addStudent","redirect","redirectId","id","alertInvalidInput","campusIdExists","campus","i","allCampuses","length","String","isGpaValid","fetchAllCampuses","alert","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from \"react-router-dom\";\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllCampusesThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      email: \"\",\n      imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n      gpa: null,\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  campusIdExists() {\n    if(!this.state.campus.id) {\n        return false;\n    }\n    for(const i = 0; i < this.props.allCampuses.length(); i++) {\n        if (String(this.props.allCampuses[i].id) === String(this.state.campus.id)) {\n            return true\n        }\n    }\n    return false;\n  }\n\n  isGpaValid() {\n    return !this.state.gpa || (this.state.gpa <= 4.0 && this.state.gpa >= 0.0)\n  }\n\n  isValidInput() {\n    this.props.fetchAllCampuses();\n    return this.isGpaValid()\n    && this.state.firstname \n    && this.state.lastname \n    && this.state.email \n    && this.state.campusId\n    && this.campusIdExists()\n  }\n\n  alertInvalidInput() {\n    switch (true) {\n        case !this.state.firstname:\n            alert(\"First Name is invalid\")\n            break\n        case !this.state.lastname:\n            alert(\"Last Name is invalid\")\n            break\n        case !this.campusIdExists():\n            alert(\"Campus ID is invalid\")\n            break\n        case !this.state.email:\n            alert(\"Email is invalid\")\n            break\n        case !this.isGpaValid():\n            alert(\"GPA is invalid\")\n            break\n        default:\n            break\n    }\n\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.isValidInput()) {\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa\n    };\n    \n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      campusId: null, \n      email: \"\",\n      imageUrl: \"https://media.istockphoto.com/id/1300845620/vector/user-icon-flat-isolated-on-white-background-user-symbol-vector-illustration.jpg?s=612x612&w=0&k=20&c=yBeyba0hUkh14_jgv1OKqIH0CCSWU_4ckRkAoy2p73o=\",\n      gpa: null,\n      redirect: true, \n      redirectId: newStudent.id\n    });\n} else {\n    this.alertInvalidInput()\n}\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          allCampuses={this.props.allCampuses}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"]},"metadata":{},"sourceType":"module"}